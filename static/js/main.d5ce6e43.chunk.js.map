{"version":3,"sources":["features/player/player_walk.png","logo.svg","config/constants.js","features/map/index.js","features/player/reducer.js","features/map/reducer.js","config/store.js","features/player/index.js","features/player/movement.js","data/maps/1/index.js","features/world/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","SPRITE_SIZE","MAP_HEIGHT","MAP_WIDTH","getTileSprite","type","MapTile","props","className","tile","style","height","width","MapRow","tiles","map","connect","state","position","top","left","border","row","initialState","spriteLocation","direction","walkIndex","playerReducer","action","payload","mapReducer","rootReducer","combineReducers","player","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","getSpriteLocation","dispatchMove","newPos","getState","getWalkIndex","dispatch","attemptMove","oldPos","getNewPosition","observeBoundaries","y","x","observeImpassable","addEventListener","e","preventDefault","keyCode","console","log","handleKeyDown","handleMovement","backgroundImage","walkSprite","backgroundPosition","World","margin","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d5ce6e43.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/player_walk.9f19440f.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export const SPRITE_SIZE = 40;\r\nexport const MAP_HEIGHT = SPRITE_SIZE * 10;\r\nexport const MAP_WIDTH = SPRITE_SIZE * 20;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { SPRITE_SIZE } from '../../config/constants';\r\n// import { }\r\nimport './styles.css';\r\n\r\nfunction getTileSprite(type) {\r\n    switch (type) {\r\n        case 0:\r\n            return 'grass';\r\n        case 3:\r\n            return 'tree';\r\n        case 4:\r\n            return 'chest';\r\n        case 5:\r\n            return 'rock';\r\n        case 6:\r\n            return 'tree';\r\n        default:\r\n            return null;\r\n    }\r\n}\r\n\r\nfunction MapTile(props) {\r\n    return <div\r\n        className={`tile ${getTileSprite(props.tile)}`}\r\n        style={{\r\n            height: SPRITE_SIZE,\r\n            width: SPRITE_SIZE\r\n        }}\r\n    ></div>\r\n}\r\n\r\nfunction MapRow(props) {\r\n    return <div className=\"row\">\r\n        {\r\n            props.tiles.map(tile => <MapTile tile={tile} />)\r\n        }\r\n    </div>\r\n\r\n}\r\n\r\nfunction Map(props) {\r\n    return (\r\n        <div\r\n            style={{\r\n                position: 'relative',\r\n                top: '0px',\r\n                left: '0px',\r\n                width: '800px',\r\n                height: '480px',\r\n                border: '4px solid white',\r\n            }}\r\n        >\r\n            {\r\n                props.tiles.map(row => <MapRow tiles={row} />)\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        tiles: state.map.tiles\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Map);","const initialState = {\r\n    position: [0, 0],\r\n    spriteLocation: '0px 0px',\r\n    direction: 'east',\r\n    walkIndex: 0,\r\n}\r\n\r\nconst playerReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case 'MOVE_PLAYER':\r\n            return {\r\n                ...action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default playerReducer;","const initialState = {\r\n    tiles: [],\r\n}\r\n\r\nconst mapReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case 'ADD_TILES':\r\n            return {\r\n                ...action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default mapReducer;","import { createStore, combineReducers } from 'redux';\r\nimport playerReducer from '../features/player/reducer';\r\nimport mapReducer from '../features/map/reducer';\r\n\r\nconst rootReducer = combineReducers({\r\n    player: playerReducer,\r\n    map: mapReducer\r\n})\r\n\r\nconst store = createStore (\r\n    rootReducer,\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\r\n)\r\n\r\nexport default store;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport walkSprite from './player_walk.png';\r\nimport handleMovement from './movement';\r\n\r\nfunction Player(props) {\r\n    return (\r\n        <div\r\n        style={{\r\n            position: 'absolute',\r\n            top: props.position[1],\r\n            left: props.position[0],\r\n            backgroundImage: `url('${walkSprite}')`,\r\n            backgroundPosition: props.spriteLocation,\r\n            width: '40px',\r\n            height: '40px',\r\n        }}\r\n        />\r\n    )\r\n}\r\n\r\nfunction mapStateToProps(state)  {\r\n    return {\r\n        ...state.player,\r\n    }\r\n}\r\n\r\nfunction getState(fn1, fn2) {\r\n    return function(component) {\r\n        return component;\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(handleMovement(Player)); ","import store from '../../config/store';\r\nimport { SPRITE_SIZE, MAP_HEIGHT, MAP_WIDTH } from '../../config/constants'\r\n\r\nexport default function handleMovement(player) {\r\n\r\n    function getNewPosition(oldPos, direction) {\r\n        switch (direction) {\r\n            case 'WEST':\r\n                return [oldPos[0] - SPRITE_SIZE, oldPos[1]];\r\n            case 'EAST':\r\n                return [oldPos[0] + SPRITE_SIZE, oldPos[1]];\r\n            case 'NORTH':\r\n                return [oldPos[0], oldPos[1] - SPRITE_SIZE];\r\n            case 'SOUTH':\r\n                return [oldPos[0], oldPos[1] + SPRITE_SIZE];\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    function getSpriteLocation(direction, walkIndex) {\r\n        switch (direction) {\r\n            case 'SOUTH':\r\n                return `${SPRITE_SIZE*walkIndex}px ${SPRITE_SIZE*0}px`;\r\n            case 'EAST':\r\n                return `${SPRITE_SIZE*walkIndex}px ${SPRITE_SIZE*1}px`;\r\n            case 'WEST':\r\n                return `${SPRITE_SIZE*walkIndex}px ${SPRITE_SIZE*2}px`;\r\n            case 'NORTH':\r\n                return `${SPRITE_SIZE*walkIndex}px ${SPRITE_SIZE*3}px`;\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    function getWalkIndex() {\r\n        const walkIndex = store.getState().player.walkIndex;\r\n        return walkIndex >= 7 ? 0 : walkIndex +1;\r\n    }\r\n\r\n    function observeBoundaries(oldPos, newPos) {\r\n        return (newPos[0] >= 0 && newPos[0] <= MAP_WIDTH - SPRITE_SIZE) && (newPos[1] >= 0 && newPos[1] <= MAP_HEIGHT - SPRITE_SIZE)\r\n    }\r\n\r\n    function observeImpassable(oldPos, newPos) {\r\n        const tiles = store.getState().map.tiles;\r\n        const y = newPos[1] / SPRITE_SIZE;\r\n        const x = newPos[0] / SPRITE_SIZE;\r\n        const nextTile = tiles[y][x];\r\n        return nextTile < 5;\r\n    }\r\n\r\n    function dispatchMove(direction, newPos) {\r\n        const walkIndex = getWalkIndex();\r\n        store.dispatch({\r\n            type: 'MOVE_PLAYER',\r\n            payload: {\r\n                position: newPos,\r\n                direction,\r\n                walkIndex,\r\n                spriteLocation: getSpriteLocation(direction, walkIndex),\r\n            }\r\n        })\r\n    }\r\n\r\n    function attemptMove(direction) {\r\n        const oldPos = store.getState().player.position;\r\n        const newPos = getNewPosition(oldPos, direction);\r\n\r\n        if (observeBoundaries(oldPos, newPos) && observeImpassable(oldPos, newPos))\r\n            dispatchMove(direction, newPos)\r\n    }\r\n\r\n    function handleKeyDown(e) {\r\n        e.preventDefault();\r\n\r\n        switch (e.keyCode) {\r\n            case 37:\r\n                return attemptMove('WEST');\r\n\r\n            case 38:\r\n                return attemptMove('NORTH');\r\n\r\n            case 39:\r\n                return attemptMove('EAST');\r\n\r\n            case 40:\r\n                return attemptMove('SOUTH');\r\n\r\n            default:\r\n                console.log(e.keyCode);\r\n        }\r\n    }\r\n\r\n    window.addEventListener('keydown', (e) => {\r\n        handleKeyDown(e)\r\n    })\r\n\r\n    return player;\r\n}","export const tiles = [\r\n    [0, 0, 6, 6, 6, 6, 6, 5, 5, 5, 5, 6, 6, 6, 5, 5, 5, 5, 5, 5],\r\n    [0, 0, 6, 6, 6, 6, 6, 5, 5, 6, 5, 6, 6, 6, 6, 5, 5, 5, 5, 5],\r\n    [0, 0, 0, 6, 6, 6, 6, 6, 6, 6, 5, 6, 0, 0, 0, 0, 6, 6, 5, 5],\r\n    [6, 0, 0, 0, 0, 0, 6, 6, 5, 5, 5, 6, 6, 0, 0, 0, 0, 6, 5, 5],\r\n    [6, 6, 0, 0, 0, 0, 0, 6, 5, 5, 5, 6, 6, 6, 0, 0, 0, 6, 5, 5],\r\n    [6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 5, 5],\r\n    [6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6],\r\n    [6, 6, 6, 5, 5, 6, 5, 6, 6, 6, 0, 0, 0, 0, 3, 3, 0, 0, 6, 6],\r\n    [6, 6, 6, 5, 6, 6, 6, 6, 6, 6, 6, 0, 0, 6, 6, 6, 0, 4, 6, 6],\r\n    [5, 6, 6, 5, 5, 6, 6, 6, 6, 6, 6, 0, 0, 6, 6, 6, 6, 6, 6, 6],\r\n    [5, 5, 6, 5, 5, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6],\r\n    [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6]\r\n]","import React from 'react';\r\nimport Map from '../map';\r\nimport Player from '../player';\r\nimport { tiles } from '../../data/maps/1';\r\nimport store from '../../config/store';\r\n\r\n\r\nfunction World(props) {\r\n    store.dispatch({ type: 'ADD_TILES', payload: {\r\n        tiles\r\n    }})\r\n    return (\r\n        <div\r\n        style={{\r\n            position: 'relative',\r\n            width: '800px',\r\n            height: '400px',\r\n            margin: '20px auto',\r\n        }}\r\n        >\r\n            <Map />\r\n            <Player />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default World;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport World from './features/world'\n\n\nfunction App() {\n  return (\n    <div>\n      <World />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\n\nimport store from './config/store.js'\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}